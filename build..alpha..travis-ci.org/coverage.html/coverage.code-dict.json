{"/home/travis/build/npmtest/node-npmtest-odbc/test.js":"/* istanbul instrument in package npmtest_odbc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-odbc/lib.npmtest_odbc.js":"/* istanbul instrument in package npmtest_odbc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_odbc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_odbc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-odbc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-odbc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_odbc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_odbc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_odbc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_odbc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_odbc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_odbc.__dirname + '/lib.npmtest_odbc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-odbc/node_modules/odbc/lib/odbc.js":"/*\n  Copyright (c) 2013, Dan VerWeire <dverweire@gmail.com>\n  Copyright (c) 2010, Lee Smith <notwink@gmail.com>\n\n  Permission to use, copy, modify, and/or distribute this software for any\n  purpose with or without fee is hereby granted, provided that the above\n  copyright notice and this permission notice appear in all copies.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\nvar odbc = require(\"bindings\")(\"odbc_bindings\")\n  , SimpleQueue = require(\"./simple-queue\")\n  , util = require(\"util\")\n  ;\n\nmodule.exports = function (options) {\n  return new Database(options);\n}\n\nmodule.exports.debug = false;\n\nmodule.exports.Database = Database;\nmodule.exports.ODBC = odbc.ODBC;\nmodule.exports.ODBCConnection = odbc.ODBCConnection;\nmodule.exports.ODBCStatement = odbc.ODBCStatement;\nmodule.exports.ODBCResult = odbc.ODBCResult;\nmodule.exports.loadODBCLibrary = odbc.loadODBCLibrary;\n\nmodule.exports.open = function (connectionString, options, cb) {\n  var db;\n  \n  if (typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n  \n  db = new Database(options);\n  \n  db.open(connectionString, function (err) {\n    cb(err, db);\n  });\n}\n\nfunction Database(options) {\n  var self = this;\n  \n  options = options || {};\n  \n  if (odbc.loadODBCLibrary) {\n    if (!options.library && !module.exports.library) {\n      throw new Error(\"You must specify a library when complied with dynodbc, \"\n        + \"otherwise this jams will segfault.\");\n    }\n    \n    if (!odbc.loadODBCLibrary(options.library || module.exports.library)) {\n      throw new Error(\"Could not load library. You may need to specify full \"\n        + \"path.\");\n    }\n  }\n  \n  self.odbc = (options.odbc) ? options.odbc : new odbc.ODBC();\n  self.queue = new SimpleQueue();\n  self.fetchMode = options.fetchMode || null;\n  self.connected = false;\n  self.connectTimeout = (options.hasOwnProperty('connectTimeout')) \n    ? options.connectTimeout\n    : null\n    ;\n  self.loginTimeout = (options.hasOwnProperty('loginTimeout'))\n    ? options.loginTimeout\n    : null\n    ;\n}\n\n//Expose constants\nObject.keys(odbc.ODBC).forEach(function (key) {\n  if (typeof odbc.ODBC[key] !== \"function\") {\n    //On the database prototype\n    Database.prototype[key] = odbc.ODBC[key];\n    \n    //On the exports\n    module.exports[key] = odbc.ODBC[key];\n  }\n});\n\nDatabase.prototype.open = function (connectionString, cb) {\n  var self = this;\n  \n  if (typeof(connectionString) == \"object\") {\n    var obj = connectionString;\n    connectionString = \"\";\n    \n    Object.keys(obj).forEach(function (key) {\n      connectionString += key + \"=\" + obj[key] + \";\";\n    });\n  }\n  \n  self.odbc.createConnection(function (err, conn) {\n    if (err) return cb(err);\n    \n    self.conn = conn;\n    \n    if (self.connectTimeout || self.connectTimeout === 0) {\n      self.conn.connectTimeout = self.connectTimeout;\n    }\n   \n    if (self.loginTimeout || self.loginTimeout === 0) {\n      self.conn.loginTimeout = self.loginTimeout;\n    }\n\n    self.conn.open(connectionString, function (err, result) {\n      if (err) return cb(err);\n                   \n      self.connected = true;\n      \n      return cb(err, result);\n    });\n  });\n};\n\nDatabase.prototype.openSync = function (connectionString) {\n  var self =  this;\n  \n  self.conn = self.odbc.createConnectionSync();\n  \n  if (self.connectTimeout || self.connectTimeout === 0) {\n    self.conn.connectTimeout = self.connectTimeout;\n  }\n  \n  if (self.loginTimeout || self.loginTimeout === 0) {\n    self.conn.loginTimeout = self.loginTimeout;\n  }\n  \n  if (typeof(connectionString) == \"object\") {\n    var obj = connectionString;\n    connectionString = \"\";\n    \n    Object.keys(obj).forEach(function (key) {\n      connectionString += key + \"=\" + obj[key] + \";\";\n    });\n  }\n  \n  var result = self.conn.openSync(connectionString);\n  \n  if (result) {\n    self.connected = true;\n  }\n  \n  return result;\n}\n\nDatabase.prototype.close = function (cb) {\n  var self = this;\n  \n  self.queue.push(function (next) {\n    //check to see if conn still exists (it's deleted when closed)\n    if (!self.conn) {\n      if (cb) cb(null);\n      return next();\n    }\n\n    self.conn.close(function (err) {\n      self.connected = false;\n      delete self.conn;\n      \n      if (cb) cb(err);\n      return next();\n    });\n  });\n};\n\nDatabase.prototype.closeSync = function () {\n  var self = this;\n  \n  var result = self.conn.closeSync();\n  \n  self.connected = false;\n  delete self.conn;\n  \n  return result\n}\n\nDatabase.prototype.query = function (sql, params, cb) {\n  var self = this;\n  \n  if (typeof(params) == 'function') {\n    cb = params;\n    params = null;\n  }\n  \n   if (!self.connected) {\n    return cb({ message : \"Connection not open.\"}, [], false);\n  }\n  \n  self.queue.push(function (next) {\n    function cbQuery (initialErr, result) {\n      fetchMore();\n      \n      function fetchMore() {\n        if (self.fetchMode) {\n          result.fetchMode = self.fetchMode;\n        }\n         \n        result.fetchAll(function (err, data) {\n          var moreResults, moreResultsError = null;\n          \n          try {\n            moreResults = result.moreResultsSync();\n          }\n          catch (e) {\n            moreResultsError = e;\n            //force to check for more results\n            moreResults = true;\n          }\n          \n          //close the result before calling back\n          //if there are not more result sets\n          if (!moreResults) {\n            result.closeSync();\n          }\n          \n          cb(err || initialErr, data, moreResults);\n          initialErr = null;\n            \n          while (moreResultsError) {\n            try {\n              moreResults = result.moreResultsSync();\n              cb(moreResultsError, [], moreResults); // No errors left - still need to report the\n                                                     // last one, though\n              moreResultsError = null;\n            } catch (e) {\n              cb(moreResultsError, [], moreResults);\n              moreResultsError = e;\n            } \n          }\n          \n          if (moreResults) {\n            return fetchMore();\n          }\n          else {\n            return next();\n          }\n        });\n      }\n    }\n    \n    if (params) {\n      self.conn.query(sql, params, cbQuery);\n    }\n    else {\n      self.conn.query(sql, cbQuery);\n    }\n  });\n};\n\nDatabase.prototype.queryResult = function (sql, params, cb) {\n  var self = this;\n  \n  if (typeof(params) == 'function') {\n    cb = params;\n    params = null;\n  }\n  \n  if (!self.connected) {\n    return cb({ message : \"Connection not open.\"}, null);\n  }\n  \n  self.queue.push(function (next) {\n    //ODBCConnection.query() is the fastest-path querying mechanism.\n    if (params) {\n      self.conn.query(sql, params, cbQuery);\n    }\n    else {\n      self.conn.query(sql, cbQuery);\n    }\n    \n    function cbQuery (err, result) {\n      if (err) {\n        cb(err, null);\n        \n        return next();\n      }\n      \n      if (self.fetchMode) {\n        result.fetchMode = self.fetchMode;\n      }\n      \n      cb(err, result);\n      \n      return next();\n    }\n  });\n};\n\nDatabase.prototype.queryResultSync = function (sql, params) {\n  var self = this, result;\n  \n  if (!self.connected) {\n    throw ({ message : \"Connection not open.\"});\n  }\n  \n  if (params) {\n    result = self.conn.querySync(sql, params);\n  }\n  else {\n    result = self.conn.querySync(sql);\n  }\n  \n  if (self.fetchMode) {\n    result.fetchMode = self.fetchMode;\n  }\n  \n  return result;\n};\n\nDatabase.prototype.querySync = function (sql, params) {\n  var self = this, result;\n  \n  if (!self.connected) {\n    throw ({ message : \"Connection not open.\"});\n  }\n  \n  if (params) {\n    result = self.conn.querySync(sql, params);\n  }\n  else {\n    result = self.conn.querySync(sql);\n  }\n  \n  if (self.fetchMode) {\n    result.fetchMode = self.fetchMode;\n  }\n  \n  var data = result.fetchAllSync();\n  \n  result.closeSync();\n  \n  return data;\n};\n\nDatabase.prototype.beginTransaction = function (cb) {\n  var self = this;\n  \n  self.conn.beginTransaction(cb);\n  \n  return self;\n};\n\nDatabase.prototype.endTransaction = function (rollback, cb) {\n  var self = this;\n  \n  self.conn.endTransaction(rollback, cb);\n  \n  return self;\n};\n\nDatabase.prototype.commitTransaction = function (cb) {\n  var self = this;\n  \n  self.conn.endTransaction(false, cb); //don't rollback\n  \n  return self;\n};\n\nDatabase.prototype.rollbackTransaction = function (cb) {\n  var self = this;\n  \n  self.conn.endTransaction(true, cb); //rollback\n  \n  return self;  \n};\n\nDatabase.prototype.beginTransactionSync = function () {\n  var self = this;\n  \n  self.conn.beginTransactionSync();\n  \n  return self;\n};\n\nDatabase.prototype.endTransactionSync = function (rollback) {\n  var self = this;\n  \n  self.conn.endTransactionSync(rollback);\n  \n  return self;\n};\n\nDatabase.prototype.commitTransactionSync = function () {\n  var self = this;\n  \n  self.conn.endTransactionSync(false); //don't rollback\n  \n  return self;\n};\n\nDatabase.prototype.rollbackTransactionSync = function () {\n  var self = this;\n  \n  self.conn.endTransactionSync(true); //rollback\n  \n  return self;  \n};\n\nDatabase.prototype.columns = function(catalog, schema, table, column, callback) {\n  var self = this;\n  if (!self.queue) self.queue = [];\n  \n  callback = callback || arguments[arguments.length - 1];\n  \n  self.queue.push(function (next) {\n    self.conn.columns(catalog, schema, table, column, function (err, result) {\n      if (err) return callback(err, [], false);\n\n      result.fetchAll(function (err, data) {\n        result.closeSync();\n\n        callback(err, data);\n        \n        return next();\n      });\n    });\n  });\n};\n\nDatabase.prototype.tables = function(catalog, schema, table, type, callback) {\n  var self = this;\n  if (!self.queue) self.queue = [];\n  \n  callback = callback || arguments[arguments.length - 1];\n  \n  self.queue.push(function (next) {\n    self.conn.tables(catalog, schema, table, type, function (err, result) {\n      if (err) return callback(err, [], false);\n\n      result.fetchAll(function (err, data) {\n        result.closeSync();\n\n        callback(err, data);\n        \n        return next();\n      });\n    });\n  });\n};\n\nDatabase.prototype.describe = function(obj, callback) {\n  var self = this;\n  \n  if (typeof(callback) != \"function\") {\n    throw({\n      error : \"[node-odbc] Missing Arguments\",\n      message : \"You must specify a callback function in order for the describe method to work.\"\n    });\n    \n    return false;\n  }\n  \n  if (typeof(obj) != \"object\") {\n    callback({\n      error : \"[node-odbc] Missing Arguments\",\n      message : \"You must pass an object as argument 0 if you want anything productive to happen in the describe method.\"\n    }, []);\n    \n    return false;\n  }\n  \n  if (!obj.database) {\n    callback({\n      error : \"[node-odbc] Missing Arguments\",\n      message : \"The object you passed did not contain a database property. This is required for the describe method to work.\"\n    }, []);\n    \n    return false;\n  }\n  \n  //set some defaults if they weren't passed\n  obj.schema = obj.schema || \"%\";\n  obj.type = obj.type || \"table\";\n  \n  if (obj.table && obj.column) {\n    //get the column details\n    self.columns(obj.database, obj.schema, obj.table, obj.column, callback);\n  }\n  else if (obj.table) {\n    //get the columns in the table\n    self.columns(obj.database, obj.schema, obj.table, \"%\", callback);\n  }\n  else {\n    //get the tables in the database\n    self.tables(obj.database, obj.schema, null, obj.type || \"table\", callback);\n  }\n};\n\nDatabase.prototype.prepare = function (sql, cb) {\n  var self = this;\n  \n  self.conn.createStatement(function (err, stmt) {\n    if (err) return cb(err);\n    \n    stmt.queue = new SimpleQueue();\n    \n    stmt.prepare(sql, function (err) {\n      if (err) return cb(err);\n      \n      return cb(null, stmt);\n    });\n  });\n}\n\nDatabase.prototype.prepareSync = function (sql, cb) {\n  var self = this;\n  \n  var stmt = self.conn.createStatementSync();\n  \n  stmt.queue = new SimpleQueue();\n    \n  stmt.prepareSync(sql);\n    \n  return stmt;\n}\n\n//Proxy all of the asynchronous functions so that they are queued\nodbc.ODBCStatement.prototype._execute = odbc.ODBCStatement.prototype.execute;\nodbc.ODBCStatement.prototype._executeDirect = odbc.ODBCStatement.prototype.executeDirect;\nodbc.ODBCStatement.prototype._executeNonQuery = odbc.ODBCStatement.prototype.executeNonQuery;\nodbc.ODBCStatement.prototype._prepare = odbc.ODBCStatement.prototype.prepare;\nodbc.ODBCStatement.prototype._bind = odbc.ODBCStatement.prototype.bind;\n\nodbc.ODBCStatement.prototype.execute = function (params, cb) {\n  var self = this;\n  \n  self.queue = self.queue || new SimpleQueue();\n  \n  if (!cb) {\n    cb = params;\n    params = null;\n  }\n  \n  self.queue.push(function (next) {\n    //If params were passed to this function, then bind them and\n    //then execute.\n    if (params) {\n      self._bind(params, function (err) {\n        if (err) {\n          return cb(err);\n        }\n        \n        self._execute(function (err, result) {\n          cb(err, result);\n          \n          return next();\n        });\n      });\n    }\n    //Otherwise execute and pop the next bind call\n    else {\n      self._execute(function (err, result) {\n        cb(err, result);\n        \n        //NOTE: We only execute the next queued bind call after\n        // we have called execute() or executeNonQuery(). This ensures\n        // that we don't call a bind() a bunch of times without ever\n        // actually executing that bind. Not \n        self.bindQueue && self.bindQueue.next();\n        \n        return next();\n      });\n    }\n  });\n};\n\nodbc.ODBCStatement.prototype.executeDirect = function (sql, cb) {\n  var self = this;\n  \n  self.queue = self.queue || new SimpleQueue();\n  \n  self.queue.push(function (next) {\n    self._executeDirect(sql, function (err, result) {\n      cb(err, result);\n      \n      return next();\n    });\n  });\n};\n\nodbc.ODBCStatement.prototype.executeNonQuery = function (params, cb) {\n  var self = this;\n  \n  self.queue = self.queue || new SimpleQueue();\n  \n  if (!cb) {\n    cb = params;\n    params = null;\n  }\n  \n  self.queue.push(function (next) {\n    //If params were passed to this function, then bind them and\n    //then executeNonQuery.\n    if (params) {\n      self._bind(params, function (err) {\n        if (err) {\n          return cb(err);\n        }\n        \n        self._executeNonQuery(function (err, result) {\n          cb(err, result);\n          \n          return next();\n        });\n      });\n    }\n    //Otherwise executeNonQuery and pop the next bind call\n    else {\n      self._executeNonQuery(function (err, result) {\n        cb(err, result);\n        \n        //NOTE: We only execute the next queued bind call after\n        // we have called execute() or executeNonQuery(). This ensures\n        // that we don't call a bind() a bunch of times without ever\n        // actually executing that bind. Not \n        self.bindQueue && self.bindQueue.next();\n        \n        return next();\n      });\n    }\n  });\n};\n\nodbc.ODBCStatement.prototype.prepare = function (sql, cb) {\n  var self = this;\n  \n  self.queue = self.queue || new SimpleQueue();\n  \n  self.queue.push(function (next) {\n    self._prepare(sql, function (err) {\n      cb(err);\n      \n      return next();\n    });\n  });\n};\n\nodbc.ODBCStatement.prototype.bind = function (ary, cb) {\n  var self = this;\n  \n  self.bindQueue = self.bindQueue || new SimpleQueue();\n  \n  self.bindQueue.push(function () {\n    self._bind(ary, function (err) {\n      cb(err);\n      \n      //NOTE: we do not call next() here because\n      //we want to pop the next bind call only\n      //after the next execute call\n    });\n  });\n};\n\n\n//proxy the ODBCResult fetch function so that it is queued\nodbc.ODBCResult.prototype._fetch = odbc.ODBCResult.prototype.fetch;\n\nodbc.ODBCResult.prototype.fetch = function (cb) {\n  var self = this;\n\n  self.queue = self.queue || new SimpleQueue();\n\n  self.queue.push(function (next) {\n    self._fetch(function (err, data) {\n      if (cb) cb(err, data);\n\n      return next();\n    });\n  });\n};\n\nmodule.exports.Pool = Pool;\n\nPool.count = 0;\n\nfunction Pool (options) {\n  var self = this;\n  self.index = Pool.count++;\n  self.availablePool = {};\n  self.usedPool = {};\n  self.odbc = new odbc.ODBC();\n  self.options = options || {}\n  self.options.odbc = self.odbc;\n}\n\nPool.prototype.open = function (connectionString, callback) {\n  var self = this\n    , db\n    ;\n\n  //check to see if we already have a connection for this connection string\n  if (self.availablePool[connectionString] && self.availablePool[connectionString].length) {\n    db = self.availablePool[connectionString].shift()\n    self.usedPool[connectionString].push(db)\n\n    callback(null, db);\n  }\n  else {\n    db = new Database(self.options);\n    db.realClose = db.close;\n    \n    db.close = function (cb) {\n      //call back early, we can do the rest of this stuff after the client thinks\n      //that the connection is closed.\n      cb(null);\n      \n      \n      //close the connection for real\n      //this will kill any temp tables or anything that might be a security issue.\n      db.realClose(function () {\n         //remove this db from the usedPool\n         self.usedPool[connectionString].splice(self.usedPool[connectionString].indexOf(db), 1);\n\n        //re-open the connection using the connection string\n        db.open(connectionString, function (error) {\n          if (error) {\n            console.error(error);\n            return;\n          }\n          \n          //add this clean connection to the connection pool\n          self.availablePool[connectionString] = self.availablePool[connectionString] || [];\n          self.availablePool[connectionString].push(db);\n          exports.debug && console.dir(self);\n        });\n      });\n    };\n    \n    db.open(connectionString, function (error) {\n      exports.debug && console.log(\"odbc.js : pool[%s] : pool.db.open callback()\", self.index);\n\n      self.usedPool[connectionString] = self.usedPool[connectionString] || [];\n      self.usedPool[connectionString].push(db);\n\n      callback(error, db);\n    });\n  }\n};\n\nPool.prototype.close = function (callback) {\n  var self = this\n    , required = 0\n    , received = 0\n    , connections\n    , key\n    , x\n    ;\n\n  exports.debug && console.log(\"odbc.js : pool[%s] : pool.close()\", self.index);\n  //we set a timeout because a previous db.close() may\n  //have caused the a behind the scenes db.open() to prepare\n  //a new connection\n  setTimeout(function () {\n    //merge the available pool and the usedPool\n    var pools = {};\n\n    for (key in self.availablePool) {\n      pools[key] = (pools[key] || []).concat(self.availablePool[key]);\n    }\n\n    for (key in self.usedPool) {\n      pools[key] = (pools[key] || []).concat(self.usedPool[key]);\n    }\n\n    exports.debug && console.log(\"odbc.js : pool[%s] : pool.close() - setTimeout() callback\", self.index);\n    exports.debug && console.dir(pools);\n\n    if (Object.keys(pools).length == 0) {\n      return callback();\n    }\n\n    for (key in pools) {\n      connections = pools[key];\n      required += connections.length;\n\n      exports.debug && console.log(\"odbc.js : pool[%s] : pool.close() - processing pools %s - connections: %s\", self.index, key, connections.length);\n\n      for (x = 0 ; x < connections.length; x ++) {\n        (function (x) {\n          //call the realClose method to avoid\n          //automatically re-opening the connection\n          exports.debug && console.log(\"odbc.js : pool[%s] : pool.close() - calling realClose() for connection #%s\", self.index, x);\n\n          connections[x].realClose(function () {\n            exports.debug && console.log(\"odbc.js : pool[%s] : pool.close() - realClose() callback for connection #%s\", self.index, x);\n            received += 1;\n\n            if (received === required) {\n              callback();\n\n              //prevent mem leaks\n              self = null;\n              connections = null;\n              required = null;\n              received = null;\n              key = null;\n\n              return;\n            }\n          });\n        })(x);\n      }\n    }\n  }, 2000);\n};\n","/home/travis/build/npmtest/node-npmtest-odbc/node_modules/odbc/lib/simple-queue.js":"module.exports = SimpleQueue;\n\nfunction SimpleQueue() {\n  var self = this;\n  \n  self.fifo = [];\n  self.executing = false;\n}\n\nSimpleQueue.prototype.push = function (fn) {\n  var self = this;\n  \n  self.fifo.push(fn);\n  \n  self.maybeNext();\n};\n\nSimpleQueue.prototype.maybeNext = function () {\n  var self = this;\n  \n  if (!self.executing) {\n    self.next();\n  }\n};\n\nSimpleQueue.prototype.next = function () {\n  var self = this;\n  \n  if (self.fifo.length) {\n    var fn = self.fifo.shift();\n    \n    self.executing = true;\n    \n    fn(function () {\n      self.executing = false;\n      \n      self.maybeNext();\n    });\n  }\n};"}